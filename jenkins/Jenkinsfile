pipeline {
    agent any

    parameters {
        string(name: 'REGISTRY', defaultValue: 'ghcr.io', description: 'Docker Registry 주소')
        string(name: 'IMAGE_NAME', defaultValue: 'prgrms-aibe-devcourse/aibe1-project2-team07-backend', description: 'Docker 이미지 이름')
    }

    environment {
        IMAGE_TAG = "${env.BRANCH_NAME}"
        IMAGE = "${params.REGISTRY}/${params.IMAGE_NAME}:${env.IMAGE_TAG}"
    }

    stages {
        stage('Validate Branch') {
            steps {
                script {
                    if (!(env.BRANCH_NAME in ['main', 'dev'])) {
                        error("Unsupported branch: ${env.BRANCH_NAME}. Only 'main' or 'dev' allowed.")
                    }
                }
            }
        }

        stage('Set Deployment Variables') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'main') {
                        env.PORT = '8443'
                        env.CONTAINER_NAME = 'pet-talk-main'
                        env.ENV_CREDENTIAL_ID = 'application-main'
                        env.SPRING_PROFILE = 'prod'
                    } else {
                        env.PORT = '8444'
                        env.CONTAINER_NAME = 'pet-talk-dev'
                        env.ENV_CREDENTIAL_ID = 'application-dev'
                        env.SPRING_PROFILE = 'dev'
                    }
                    echo "Deploying ${env.BRANCH_NAME} -> Container: ${env.CONTAINER_NAME}, Port: ${env.PORT}, Credential: ${env.ENV_CREDENTIAL_ID}, Profile: ${env.SPRING_PROFILE}"
                }
            }
        }

        stage('Authenticate with GHCR') {
            steps {
                echo 'GHCR에 인증 중...'
                withCredentials([string(credentialsId: 'github_access_token', variable: 'GITHUB_TOKEN')]) {
                    sh 'echo $GITHUB_TOKEN | docker login ghcr.io -u Lucky-0111 --password-stdin'
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                echo "Docker 이미지 가져오는 중... (이미지: ${env.IMAGE})"
                sh "docker rmi -f ${env.IMAGE} || true"
                sh "docker pull ${env.IMAGE}"
            }
        }

        stage('Stop Previous Container') {
            steps {
                echo '기존 컨테이너 중지 중...'
                sh "docker stop ${env.CONTAINER_NAME} || true"
                sh "docker rm ${env.CONTAINER_NAME} || true"
            }
        }

        stage('Run New Container') {
            steps {
                echo '새 컨테이너 실행 중...'
                script {
                    withCredentials([file(credentialsId: env.ENV_CREDENTIAL_ID, variable: 'DOTENV_FILE_PATH')]) {
                        withEnv([
                            "CONTAINER_NAME=${env.CONTAINER_NAME}",
                            "PORT=${env.PORT}",
                            "IMAGE=${env.IMAGE}",
                            "ENV_FILE_PATH=${DOTENV_FILE_PATH}",
                            "SPRING_PROFILE=${env.SPRING_PROFILE}"
                        ]) {
                            sh '''
                                docker run -d \\
                                  --name $CONTAINER_NAME \\
                                  -p $PORT:$PORT \\
                                  --env-file $ENV_FILE_PATH \\
                                  -e SPRING_PROFILES_ACTIVE=$SPRING_PROFILE \\
                                  $IMAGE
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo '배포 실패 ❌'
        }
        success {
            echo '배포 성공 ✅'
        }
    }
}